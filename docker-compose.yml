name: "jmrg-poc-kairos-api"

# =============================================================================
# SISTEMA DE PROCESAMIENTO DE IMÁGENES - STACK COMPLETO DE PRODUCCIÓN
# =============================================================================
#
# Este docker-compose orquesta un sistema empresarial completo de procesamiento
# de imágenes que implementa Clean Architecture + CQRS + Event-Driven patterns.
#
# ARQUITECTURA:
# - API REST (Node.js + Express) con Clean Architecture
# - Worker de procesamiento (Sharp) con Event-Driven Architecture
# - CQRS con CommandBus/QueryBus y Mediator pattern
# - Redis para cache (Cache-Aside) y colas (BullMQ)
# - MongoDB para persistencia con esquemas optimizados
# - Stack de monitoreo completo (Prometheus + Grafana + Loki)
# - Proxy reverso con SSL y rate limiting (Traefik v3.5)
#
# STACK TECNOLÓGICO:
# - Runtime: Node.js 20 LTS
# - Framework: Express.js con TypeScript
# - Base de datos: MongoDB 7.0 con autenticación
# - Cache & Queues: Redis 7.4 con persistencia
# - Image Processing: Sharp con resoluciones 1024px y 800px
# - Monitoring: Prometheus + Grafana + Loki
# - Proxy: Traefik v3.5 con HTTP/3 y SSL automático
#
# REDES:
# - proxy: Frontend y routing (Traefik + API)
# - backend: Servicios internos (API + Worker + BD)
# - monitoring: Stack de observabilidad
#
# =============================================================================

services:
  # ========= Traefik v3.5 - Proxy Reverso y Load Balancer =========
  traefik:
    image: traefik:v3.5
    container_name: poc-traefik
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http3=true"
      - "--certificatesresolvers.le.acme.email=${SSL_EMAIL:-info@jmrg.dev}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.ocspStapling=true"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.format=json"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entrypoints.metrics.address=:8082"
      - "--api.dashboard=true"
      - "--core.defaultRuleSyntax=v3"
    ports:
      - "80:80"
      - "443:443"
      - "8082:8082"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/traefik/acme:/letsencrypt
      - ./logs/traefik:/var/log
    networks:
      - proxy
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"

  # ========= API Service - Clean Architecture + CQRS =========
  api-backend:
    container_name: poc-api-backend
    # build:
    #   context: ./image-express-api
    #   dockerfile: Dockerfile
    image: ${IMAGE_API:-ghcr.io/jmrg-link/poc-backend-kairosds/image-express-api:latest}
    restart: unless-stopped
    environment:
      NODE_ENV: production
      SERVER_PORT: 3000
      SERVER_API_VERSION: v1
      MONGODB_URI: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/imagedb?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
      QUEUE_NAME: image-processing
      QUEUE_CONCURRENCY: 5
      QUEUE_MAX_RETRIES: 3
      STORAGE_INPUT_PATH: ${STORAGE_INPUT_PATH:-/home/node/app/storage/images/input}
      STORAGE_OUTPUT_PATH: ${STORAGE_OUTPUT_PATH:-/home/node/app/output}
      API_KEY: ${API_KEY}
      ENABLE_SWAGGER: true
      LOG_LEVEL: info
      LOKI_URL: http://loki:3100
      LOKI_BATCH_SIZE: 100
      LOKI_BATCH_INTERVAL: 5000
      APP_VERSION: ${APP_VERSION:-1.0.0}
    ports:
      - "3000:3000"
    volumes:
      - ./storage:/home/node/app/storage
      - ./output:/home/node/app/output
      - ./logs:/home/node/app/logs
    depends_on:
      - mongodb
      - redis
      - loki
    networks:
      - proxy
      - backend
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=le"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
      - "traefik.http.routers.api.middlewares=security,ratelimit,cors"
      - "traefik.http.middlewares.security.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security.headers.stsPreload=true"
      - "traefik.http.middlewares.security.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security.headers.browserXssFilter=true"
      - "traefik.http.middlewares.ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.ratelimit.ratelimit.burst=200"
      - "traefik.http.middlewares.ratelimit.ratelimit.period=1m"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=https://app.${DOMAIN}"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type,Authorization,X-Idempotency-Key"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=86400"

  # ========= Worker Service - Event-Driven Image Processing =========
  worker:
    container_name: poc-worker
    # build:
    #   context: ./image-processing-worker
    #   dockerfile: Dockerfile
    image: ${IMAGE_WORKER:-ghcr.io/jmrg-link/poc-backend-kairosds/image-processing-worker:latest}
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb:27017/imagedb?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
      QUEUE_NAME: image-processing
      CONCURRENCY: 5
      MAX_RETRIES: 3
      STORAGE_INPUT_PATH: ${STORAGE_INPUT_PATH:-/app/storage/images/input}
      STORAGE_OUTPUT_PATH: ${STORAGE_OUTPUT_PATH:-/app/storage/images/output}
      LOKI_URL: http://loki:3100
      WORKER_ID: ${WORKER_ID:-worker-1}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      LOG_LEVEL: info
    volumes:
      - ./storage:/home/node/app/storage
      - ./output:/home/node/app/output
      - ./logs:/home/node/app/logs
    depends_on:
      - mongodb
      - redis
      - loki
    networks:
      - backend
      - monitoring

  # ========= MongoDB 7.0 - Base de Datos Principal =========
  mongodb:
    image: mongo:7.0
    container_name: poc-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    networks:
      - backend
    ports:
      - 27099:27017
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: >
        mongod
        --quiet
        --bind_ip_all
        --auth
        --oplogSize 1024
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========= Redis 7.4 - Cache & Queue Storage =========
  redis:
    image: redis:7.4-alpine
    container_name: poc-redis
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 768mb
      --maxmemory-policy noeviction
      --requirepass ${REDIS_PASSWORD}
      --save 900 1
      --save 300 10
      --appendonly yes
    networks:
      - backend
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========= Loki 3.0 - Agregación de Logs =========
  loki:
    image: grafana/loki:3.0.0
    container_name: poc-loki
    restart: unless-stopped
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========= Prometheus 2.48 - Métricas del Sistema =========
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: poc-prometheus
    restart: unless-stopped
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - monitoring
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=le"
      - "traefik.http.routers.prometheus.middlewares=auth"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ========= Grafana 10.2 - Dashboard de Monitoreo =========
  grafana:
    image: grafana/grafana:10.2.0
    container_name: poc-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_LOG_LEVEL=info
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
      - proxy
    depends_on:
      - loki
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=le"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

# =============================================================================
# VOLÚMENES PERSISTENTES
# =============================================================================
volumes:
  mongodb_data:
  mongodb_config:
  redis_data:
  loki_data:
  prometheus_data:
  grafana_data:

# =============================================================================
# REDES
# =============================================================================
networks:
  proxy:
    driver: bridge
    name: proxy
  backend:
    driver: bridge
    name: backend
  monitoring:
    driver: bridge
    name: monitoring