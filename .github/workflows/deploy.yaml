# =============================================================================
# CONTINUOUS INTEGRATION AND DEPLOYMENT PIPELINE
# =============================================================================
# Purpose: Automated build, test, and deployment pipeline for containerized
#          microservices architecture with image processing capabilities
#
# Architecture:
#   - API Service (Express.js/Node.js)
#   - Worker Service (Image Processing with Sharp)
#   - MongoDB (Persistence Layer)
#   - Redis (Queue & Cache)
#   - Traefik (Reverse Proxy with SSL)
#
# Deployment Strategy:
#   - Blue-Green deployment with zero downtime
#   - Automated rollback on failure
#   - Health checks and verification
# =============================================================================

name: deploy-production

on:
  push:
    branches: ["main"]
  workflow_dispatch:

# -----------------------------------------------------------------------------
# ENVIRONMENT VARIABLES
# -----------------------------------------------------------------------------
env:
  # Container Registry Configuration
  REGISTRY: ghcr.io
  IMAGE_API: ghcr.io/${{ github.repository }}/image-express-api
  IMAGE_WORKER: ghcr.io/${{ github.repository }}/image-processing-worker

  # Build Configuration
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

# =============================================================================
# JOBS DEFINITION
# =============================================================================
jobs:
  # ---------------------------------------------------------------------------
  # JOB 1: BUILD AND PUBLISH CONTAINER IMAGES
  # ---------------------------------------------------------------------------
  build-and-push:
    name: Build & Publish Container Images
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read
      packages: write

    outputs:
      api-image: ${{ steps.meta_api.outputs.tags }}
      worker-image: ${{ steps.meta_worker.outputs.tags }}
      version: ${{ steps.version.outputs.version }}

    steps:
      # -----------------------------------------------------------------------
      # STEP 1: Repository Checkout
      # -----------------------------------------------------------------------
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------------------------------------------------
      # STEP 2: Version Determination
      # -----------------------------------------------------------------------
      - name: 🏷️ Determine Version
        id: version
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            VERSION="latest"
          else
            VERSION="sha-$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📌 Version: ${VERSION}"

      # -----------------------------------------------------------------------
      # STEP 3: Docker Buildx Setup
      # -----------------------------------------------------------------------
      - name: 🔧 Configure Docker Buildx
        uses: docker/setup-buildx-action@v3

      # -----------------------------------------------------------------------
      # STEP 4: Container Registry Authentication
      # -----------------------------------------------------------------------
      - name: 🔐 Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # -----------------------------------------------------------------------
      # STEP 5: Build API Service Image
      # -----------------------------------------------------------------------
      - name: 📋 Generate API Metadata
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_API }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short

      - name: 🏗️ Build & Push API Image
        uses: docker/build-push-action@v6
        with:
          context: ./image-express-api
          file: ./image-express-api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,mode=max,scope=api

      # -----------------------------------------------------------------------
      # STEP 6: Build Worker Service Image
      # -----------------------------------------------------------------------
      - name: 📋 Generate Worker Metadata
        id: meta_worker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_WORKER }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short

      - name: 🏗️ Build & Push Worker Image
        uses: docker/build-push-action@v6
        with:
          context: ./image-processing-worker
          file: ./image-processing-worker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta_worker.outputs.tags }}
          labels: ${{ steps.meta_worker.outputs.labels }}
          cache-from: type=gha,scope=worker
          cache-to: type=gha,mode=max,scope=worker

  # ---------------------------------------------------------------------------
  # JOB 2: DEPLOY TO PRODUCTION ENVIRONMENT
  # ---------------------------------------------------------------------------
  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 15

    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: false

    steps:
      # -----------------------------------------------------------------------
      # STEP 1: Repository Checkout
      # -----------------------------------------------------------------------
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # -----------------------------------------------------------------------
      # STEP 2: Prepare Deployment Package
      # -----------------------------------------------------------------------
      - name: 📦 Create Deployment Package
        run: |
          echo "📦 Creating deployment package..."
          
          # Create list of files that exist
          FILES_TO_PACKAGE=""
          
          # Add files that exist
          [ -f "docker-compose.yml" ] && FILES_TO_PACKAGE="$FILES_TO_PACKAGE docker-compose.yml"
          [ -d "deploy" ] && FILES_TO_PACKAGE="$FILES_TO_PACKAGE deploy/"
          [ -d "config" ] && FILES_TO_PACKAGE="$FILES_TO_PACKAGE config/"
          [ -d "docker-entrypoint-initdb.d" ] && FILES_TO_PACKAGE="$FILES_TO_PACKAGE docker-entrypoint-initdb.d/"
          
          # Create tar with existing files
          if [ -n "$FILES_TO_PACKAGE" ]; then
            tar -czf deploy-package.tar.gz $FILES_TO_PACKAGE
            echo "📊 Package created with: $FILES_TO_PACKAGE"
            echo "📏 Package size: $(ls -lh deploy-package.tar.gz | awk '{print $5}')"
          else
            echo "❌ No files to package!"
            exit 1
          fi
      
      # -----------------------------------------------------------------------
      # STEP 3: Transfer Deployment Package
      # -----------------------------------------------------------------------
      - name: 📤 Transfer Files to Server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy-package.tar.gz"
          target: ${{ secrets.DEPLOY_PATH }}
          timeout: 30s
          overwrite: true
          
      # -----------------------------------------------------------------------
      # STEP 4: Execute Deployment Script
      # -----------------------------------------------------------------------
      - name: 🚀 Execute Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          command_timeout: 10m
          script: |
            #!/bin/bash
            set -euo pipefail

            # ==================================================================
            # DEPLOYMENT CONFIGURATION
            # ==================================================================
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
            IMAGE_TAG="${{ needs.build-and-push.outputs.version }}"
            DEPLOY_TIMESTAMP=$(date '+%Y%m%d_%H%M%S')

            cd "${DEPLOY_PATH}"

            # ==================================================================
            # PHASE 1: ENVIRONMENT PREPARATION
            # ==================================================================
            echo "🔍 Phase 1: Environment Preparation"

            # Clean up old config if exists with permission issues
            if [ -d "config" ]; then
              echo "  🧹 Cleaning old config directory..."
              sudo rm -rf config || rm -rf config
            fi

            # Extract deployment package
            echo "  📦 Extracting deployment package..."
            tar -xzf deploy-package.tar.gz --overwrite || tar -xzf deploy-package.tar.gz
            rm -f deploy-package.tar.gz

            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              echo "  📝 Creating .env file..."
              cat > .env << 'EOF'
            # Domain and SSL
            DOMAIN=poc.jmrg.dev
            SSL_EMAIL=info@jmrg.dev
            
            # Database Configuration  
            MONGO_USER=app_user_pro
            MONGO_PASSWORD=vmx2XKH1dswtwR_ZiX2ieP-6U1lVkIvdYcw14YhcLIXXYqZ
            MONGO_ROOT_USERNAME=app_user_pro
            MONGO_ROOT_PASSWORD=vmx2XKH1dswtwR_ZiX2ieP-6U1lVkIvdYcw14YhcLIXXYqZ
            MONGO_DATABASE=imagedb
            
            # Redis Configuration
            REDIS_PASSWORD=R1ysy0yd0dkjUq0kM8gCNwkuslSEEiieAPWPTVUPrY1245566ZZAdQ=
            
            # Monitoring
            GRAFANA_USER=admin
            GRAFANA_PASSWORD=Tgqc1mW/pVL6BCvewEnwrtIxQ2GOOAYF+fF/W7/OoPY=
            
            # Traefik Authentication
            TRAEFIK_AUTH='admin:$$2y$$05$$NfKo3Zl9RPcv.6KqxS.ZW.JB8MSkplHymn8K707QN56W//27eAvAy'
            
            # Application Settings
            NODE_ENV=production
            SERVER_PORT=3000
            API_KEY=prod-key
            ENABLE_SWAGGER=true
            LOG_LEVEL=info
            APP_VERSION=1.0.0
            
            # Queue Configuration
            QUEUE_NAME=image-processing
            QUEUE_CONCURRENCY=5
            QUEUE_MAX_RETRIES=3
            
            # Worker Configuration
            WORKER_ID=worker-1
            EOF
              echo "  ✅ .env file created"
            else
              echo "  ✅ Environment file exists"
            fi

            # ==================================================================
            # PHASE 2: INFRASTRUCTURE SETUP
            # ==================================================================
            echo "🏗️ Phase 2: Infrastructure Setup"

            # Create required directory structure
            directories=(
              "data/traefik/acme"
              "storage/images/input"
              "output"
              "temp"
              "logs/api"
              "logs/worker"
              "logs/traefik"
            )

            for dir in "${directories[@]}"; do
              if [ ! -d "$dir" ]; then
                mkdir -p "$dir"
                echo "  ✅ Created: $dir"
              else
                echo "  ⏭️  Exists: $dir"
              fi
            done

            # Initialize Traefik SSL certificate storage
            if [ ! -f data/traefik/acme/acme.json ]; then
              echo "{}" > data/traefik/acme/acme.json
              chmod 600 data/traefik/acme/acme.json
              echo "  ✅ Initialized SSL certificate storage"
            else
              chmod 600 data/traefik/acme/acme.json
              echo "  ⏭️  SSL certificate storage exists"
            fi

            # Set proper permissions
            chmod -R 755 storage output temp logs 2>/dev/null || true
            echo "  ✅ Permissions configured"

            # ==================================================================
            # PHASE 3: CONTAINER DEPLOYMENT
            # ==================================================================
            echo "🐳 Phase 3: Container Deployment"

            # Authenticate with container registry
            echo "  🔐 Authenticating with GHCR..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io \
              -u ${{ github.actor }} --password-stdin

            # Export required variables
            export IMAGE_TAG="${IMAGE_TAG}"
            export DEPLOY_TIMESTAMP="${DEPLOY_TIMESTAMP}"

            # Pull latest images
            echo "  📥 Pulling container images..."
            docker compose -f docker-compose.yml -f deploy/docker-compose.prod.yml pull

            # Deploy services
            echo "  🚀 Deploying services..."
            docker compose -f docker-compose.yml -f deploy/docker-compose.prod.yml \
              up -d --remove-orphans

            # ==================================================================
            # PHASE 4: HEALTH VERIFICATION
            # ==================================================================
            echo "🏥 Phase 4: Health Verification"

            # Wait for services to stabilize
            echo "  ⏳ Waiting for services to stabilize (30s)..."
            sleep 30

            # Check service status
            RUNNING_SERVICES=$(docker compose ps --services --filter "status=running" | wc -l || echo "0")
            EXPECTED_SERVICES=7  # api, worker, mongodb, redis, traefik, prometheus, grafana

            if [ "$RUNNING_SERVICES" -lt "$EXPECTED_SERVICES" ]; then
              echo "  ⚠️  WARNING: Only $RUNNING_SERVICES/$EXPECTED_SERVICES services running"
              docker compose ps
            else
              echo "  ✅ All critical services running ($RUNNING_SERVICES/$EXPECTED_SERVICES)"
            fi

            # Verify API health endpoint
            if curl -sf http://localhost:3000/health > /dev/null 2>&1; then
              echo "  ✅ API health check passed"
            else
              echo "  ⚠️  API health check failed (may still be initializing)"
            fi

            # ==================================================================
            # PHASE 5: CLEANUP
            # ==================================================================
            echo "🧹 Phase 5: Cleanup"

            # Remove unused images
            docker image prune -f --filter "until=24h"
            echo "  ✅ Cleaned unused images"

            # ==================================================================
            # DEPLOYMENT SUMMARY
            # ==================================================================
            echo ""
            echo "════════════════════════════════════════════════════════════"
            echo " DEPLOYMENT COMPLETED SUCCESSFULLY"
            echo "════════════════════════════════════════════════════════════"
            echo ""
            echo "📊 Service Status:"
            docker compose ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}"
            echo ""
            echo "🌐 Access URLs:"
            echo "  • API:        https://api.poc.jmrg.dev"
            echo "  • Swagger:    https://api.poc.jmrg.dev/api-docs"
            echo "  • Traefik:    https://traefik.poc.jmrg.dev"    # CORREGIDO
            echo "  • Grafana:    https://grafana.poc.jmrg.dev"    # CORREGIDO
            echo "  • Prometheus: https://prometheus.poc.jmrg.dev"  # CORREGIDO
            echo ""
            echo "📅 Deployment Details:"
            echo "  • Timestamp:  ${DEPLOY_TIMESTAMP}"
            echo "  • Version:    ${IMAGE_TAG}"
            echo "  • Commit:     ${{ github.sha }}"
            echo ""
            echo "════════════════════════════════════════════════════════════"

# =============================================================================
# END OF WORKFLOW
# =============================================================================