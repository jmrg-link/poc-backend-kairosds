# =============================================================================
# CI/CD ‚Äì Build de API y Worker ‚Üí GHCR + Deploy por SSH con docker compose
# =============================================================================
name: ci-cd
on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  IMAGE_API: ghcr.io/${{ github.repository }}/image-express-api
  IMAGE_WORKER: ghcr.io/${{ github.repository }}/image-processing-worker

jobs:
  # ===========================================================================
  # 1) BUILD & PUSH ‚Äì Publica im√°genes en GHCR (API y Worker)
  # ===========================================================================
  build-and-push:
    name: Build & Push images (GHCR)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: ‚è±Ô∏è Delay inicial para sincronizaci√≥n
        run: |
          echo "‚è≥ Esperando 30 segundos para asegurar sincronizaci√≥n completa del push..."
          sleep 30

      - name: üß± Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # -------- API --------
      - name: üè∑Ô∏è Meta (API)
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_API }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short

      - name: üèóÔ∏è Build & Push (API)
        uses: docker/build-push-action@v6
        with:
          context: ./image-express-api
          file: ./image-express-api/Dockerfile
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -------- Worker --------
      - name: üè∑Ô∏è Meta (Worker)
        id: meta_worker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_WORKER }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short

      - name: üèóÔ∏è Build & Push (Worker)
        uses: docker/build-push-action@v6
        with:
          context: ./image-processing-worker
          file: ./image-processing-worker/Dockerfile
          push: true
          tags: ${{ steps.meta_worker.outputs.tags }}
          labels: ${{ steps.meta_worker.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ‚è±Ô∏è Esperar propagaci√≥n de im√°genes
        run: |
          echo "‚è≥ Esperando 15 segundos para propagaci√≥n de im√°genes en GHCR..."
          sleep 15

  # ===========================================================================
  # 2) DEPLOY ‚Äì Copia archivos al VPS y levanta con compose
  # ===========================================================================
  deploy:
    name: Deploy to VPS (docker compose)
    needs: build-and-push
    runs-on: ubuntu-latest
    concurrency: deploy-${{ github.ref }}
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
      - name: ‚è±Ô∏è Pre-deploy delay
        run: |
          echo "‚è≥ Esperando 10 segundos antes del deploy para asegurar disponibilidad..."
          sleep 10

      - name: üì¶ Copiar archivos (SCP)
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy-files.tar.gz"
          target: ${{ secrets.DEPLOY_PATH }}

      - name: üöÄ Desplegar (SSH)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            cd "${{ secrets.DEPLOY_PATH }}"

            # Extraer archivos del tar
            echo "üì¶ Extrayendo archivos..."
            tar -xzf deploy-files.tar.gz
            rm -f deploy-files.tar.gz

            # Verificar que existe el archivo .env con las credenciales
            test -f .env || { echo "‚ùå Falta .env en $PWD"; exit 1; }

            # =======================================================================
            # CREAR ESTRUCTURA DE DIRECTORIOS COMPLETA
            # =======================================================================
            echo "üìÅ Creando estructura de directorios..."
            
            # Directorios de Traefik y certificados SSL
            if [ ! -d data/traefik/acme ]; then
              echo "  ‚Üí Creando data/traefik/acme..."
              mkdir -p data/traefik/acme || { echo "‚ùå No pude crear data/traefik/acme"; exit 1; }
            fi
            
            if [ ! -f data/traefik/acme/acme.json ]; then
              echo "{}" > data/traefik/acme/acme.json || { echo "‚ùå No pude crear acme.json"; exit 1; }
            fi
            chmod 600 data/traefik/acme/acme.json || { echo "‚ùå No pude aplicar chmod 600 a acme.json"; exit 1; }

            # =======================================================================
            # DIRECTORIOS DE ALMACENAMIENTO SEG√öN REQUISITOS
            # =======================================================================
            echo "üìÇ Configurando directorios de almacenamiento..."
            
            # Estructura de storage para im√°genes originales
            mkdir -p storage/images/input || { echo "‚ùå Error creando storage/images/input"; exit 1; }
            echo "  ‚úì storage/images/input"
            
            # Directorio de salida para im√°genes procesadas
            mkdir -p output || { echo "‚ùå Error creando output"; exit 1; }
            echo "  ‚úì output"
            
            # Directorio temporal para procesamiento
            mkdir -p temp || { echo "‚ùå Error creando temp"; exit 1; }
            echo "  ‚úì temp"
            
            # Logs separados por servicio
            mkdir -p logs/{api,worker,traefik} || { echo "‚ùå Error creando directorios de logs"; exit 1; }
            echo "  ‚úì logs/{api,worker,traefik}"
            
            # Directorios de configuraci√≥n si no existen
            mkdir -p config/{loki,prometheus,grafana/{provisioning,dashboards}}
            echo "  ‚úì config/{loki,prometheus,grafana}"
            
            # Directorio para scripts de inicializaci√≥n de MongoDB
            mkdir -p docker-entrypoint-initdb.d
            echo "  ‚úì docker-entrypoint-initdb.d"

            # =======================================================================
            # PERMISOS DE DIRECTORIOS
            # =======================================================================
            echo "üîê Configurando permisos..."
            
            # Si estamos en un sistema que soporta chown con UID espec√≠ficos
            if command -v chown >/dev/null 2>&1; then
              # Intentar cambiar propietario a UID 1001 (nodeuser en contenedor)
              chown -R 1001:1001 storage output temp logs 2>/dev/null || {
                echo "  ‚ö†Ô∏è  No se pudieron cambiar propietarios (requiere permisos root)"
              }
            fi
            
            # Asegurar permisos de escritura
            chmod -R 755 storage output temp logs || {
              echo "  ‚ö†Ô∏è  No se pudieron cambiar permisos"
            }

            # =======================================================================
            # DETERMINACI√ìN DEL TAG DE IMAGEN
            # =======================================================================
            SHORT_SHA="$(echo "${{ github.sha }}" | cut -c1-7)"
            
            if [ "${{ github.ref_name }}" = "main" ]; then 
              IMAGE_TAG="latest"
              echo "‚úÖ Desplegando a producci√≥n con tag: latest"
            else 
              IMAGE_TAG="$SHORT_SHA"
              echo "üß™ Desplegando branch de desarrollo con tag: $SHORT_SHA"
            fi
            
            export IMAGE_TAG

            # Login a GitHub Container Registry
            echo "üîê Login a GitHub Container Registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # =======================================================================
            # VERIFICAR DISPONIBILIDAD DE IM√ÅGENES CON REINTENTOS
            # =======================================================================
            echo "üîç Verificando disponibilidad de im√°genes..."
            
            MAX_RETRIES=5
            RETRY_DELAY=10
            
            for i in $(seq 1 $MAX_RETRIES); do
              echo "  Intento $i de $MAX_RETRIES..."
              
              if docker pull ghcr.io/${{ github.repository }}/image-express-api:${IMAGE_TAG} && \
                 docker pull ghcr.io/${{ github.repository }}/image-processing-worker:${IMAGE_TAG}; then
                echo "  ‚úÖ Im√°genes disponibles"
                break
              else
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "  ‚ùå No se pudieron descargar las im√°genes despu√©s de $MAX_RETRIES intentos"
                  exit 1
                fi
                echo "  ‚è≥ Esperando $RETRY_DELAY segundos antes de reintentar..."
                sleep $RETRY_DELAY
              fi
            done

            # Pull de todas las im√°genes del compose
            echo "üì• Descargando todas las im√°genes..."
            docker compose pull

            # =======================================================================
            # DEPLOY CON ZERO-DOWNTIME
            # =======================================================================
            echo "üöÄ Iniciando deploy..."
            
            # Deploy
            docker compose up -d --remove-orphans

            # Esperar a que los servicios est√©n listos
            echo "‚è≥ Esperando que los servicios inicien (30 segundos)..."
            sleep 30

            # =======================================================================
            # VERIFICACI√ìN DEL DEPLOY
            # =======================================================================
            echo "üìä Verificando estado del deploy..."
            
            # Verificar que los servicios principales est√©n running
            SERVICES_UP=$(docker compose ps --format "table {{.Service}}\t{{.Status}}" | grep -E "(api-backend|worker)" | grep -c "Up" || true)
            
            if [ "$SERVICES_UP" -lt 2 ]; then
              echo "‚ùå Algunos servicios no est√°n funcionando correctamente"
              echo "üìã Estado actual de los servicios:"
              docker compose ps
              echo ""
              echo "üìã Logs de los √∫ltimos errores:"
              docker compose logs --tail=50 api-backend worker
              exit 1
            else
              echo "‚úÖ Servicios principales funcionando correctamente"
            fi
            
            # Verificar health check de API si es posible
            echo "üîç Verificando health de API..."
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health | grep -q "200"; then
              echo "  ‚úÖ API respondiendo correctamente"
            else
              echo "  ‚ö†Ô∏è  API no responde en health check (puede estar iniciando a√∫n)"
            fi
            
            # Limpieza de im√°genes antiguas
            echo "üßπ Limpiando im√°genes antiguas..."
            docker image prune -f

            # Mostrar estado final
            echo ""
            echo "üìä Estado final de los servicios:"
            docker compose ps
            
            # Mostrar URLs de acceso (URLs fijas conocidas)
            echo ""
            echo "üåê URLs de acceso:"
            echo "  ‚Üí API: https://api.poc.jmrg.dev"
            echo "  ‚Üí Swagger: https://api.poc.jmrg.dev/api-docs"
            echo "  ‚Üí Traefik Dashboard: https://traefik.poc.jmrg.dev"
            echo "  ‚Üí Grafana: https://grafana.poc.jmrg.dev"
            echo "  ‚Üí Prometheus: https://prometheus.poc.jmrg.dev"
            
            echo ""
            echo "‚úÖ Deploy completado exitosamente a las $(date '+%Y-%m-%d %H:%M:%S')"